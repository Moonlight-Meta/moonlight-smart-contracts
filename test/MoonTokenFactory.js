// const { expect } = require("chai");
// const { loadFixture } = require("@nomicfoundation/hardhat-network-helpers");
// const { ethers, waffle } = require("hardhat");

// describe("MoonTokenFactory Testing", function () {

//     async function deployFactoryFixture() {

//         const TokenFactory = await ethers.getContractFactory("MoonTokenFactory");

//         const moonTokenFactory = await TokenFactory.deploy();

//         await moonTokenFactory.deployed();

//         const [owner, one, two, three, four] = await ethers.getSigners();

//         return { moonTokenFactory,owner,one,two,three,four }

//     }

//     it("Should deploy MoonTokenFactory", async function () {
//         const { moonTokenFactory } = await loadFixture(deployFactoryFixture)
        

//         expect(moonTokenFactory);

//     });

//     it("Should allow us to add admins", async function () {
//         const { moonTokenFactory, one} = await loadFixture(deployFactoryFixture)

//         await expect(moonTokenFactory.connect(one).newMoonToken("Token","TKN", "412")).to.be.reverted

//         await moonTokenFactory.grantOwnerRole(one.address);

//         await expect(moonTokenFactory.connect(one).newMoonToken("Token","TKN", "412")).to.not.be.reverted
//     });

//     async function deployTokenFixture() {
//         const { moonTokenFactory } = await loadFixture(deployFactoryFixture)

//         const Token = await ethers.getContractFactory("MoonToken");

//         await moonTokenFactory.newMoonToken("MoonToken", "MTKN", "12345")

//         const address = moonTokenFactory.getLatestToken();

//         const moonToken = await Token.attach(address)

//         const [owner, one, two, three, four] = await ethers.getSigners();

//         await moonTokenFactory.giveContractOwnership(address, owner.address)

//         return {moonToken, owner, one, two, three, four }
//     }

//     describe("Testing the MoonToken generated by the Factory", function () {
//         it("Should deploy MoonToken", async function() {

//             const {moonToken} = await loadFixture(deployTokenFixture)
//             expect(moonToken)
        
//           })
//         it("Should be able to mint to specific users", async function() {
        
//             const {moonToken, one, two} = await loadFixture(deployTokenFixture)
//             const oneBalance = 50
//             const twoBalance = 30
            
//             await moonToken.mint(one.address, oneBalance)
//             await moonToken.mint(two.address, twoBalance)
//             expect(await moonToken.balanceOf(one.address)).to.equal(oneBalance)
//             expect( await moonToken.balanceOf(two.address)).to.equal(twoBalance)
        
//           })
//         it("Should be able to send money", async function() {
        
//             const {moonToken, one, two} = await loadFixture(deployTokenFixture)
//             const oneBalance = 50
//             const twoBalance = 30
        
//             const transfer = 30
        
//             await moonToken.mint(one.address, oneBalance)
//             await moonToken.mint(two.address, twoBalance)
            
//             await moonToken.connect(one).transfer(two.address, transfer)
//             expect(await moonToken.balanceOf(two.address)).to.equal(twoBalance+transfer)
//             expect(await moonToken.balanceOf(one.address)).to.equal(oneBalance-transfer)
        
//           })
//         it("Should be able to let another user transfer on their behalf", async function() {
        
//             const {moonToken, one, two} = await loadFixture(deployTokenFixture)
//             const oneBalance = 50
//             const twoBalance = 30
        
//             const transfer = 30
        
//             await moonToken.mint(one.address, oneBalance)
//             await moonToken.mint(two.address, twoBalance)
        
//             await moonToken.connect(one).approve(two.address, transfer)
            
//             await moonToken.connect(two).transferFrom(one.address, two.address, transfer)
//             expect(await moonToken.balanceOf(two.address)).to.equal(twoBalance+transfer)
//             expect(await moonToken.balanceOf(one.address)).to.equal(oneBalance-transfer)
        
//           })
//     });
// });