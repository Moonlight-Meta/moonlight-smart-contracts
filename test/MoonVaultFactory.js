const { expect } = require("chai");
const { loadFixture } = require("@nomicfoundation/hardhat-network-helpers");
const { ethers, waffle } = require("hardhat");

describe("MoonVaultFactory Testing", function () {

    async function deployFactoryFixture() {

        const VaultFactory = await ethers.getContractFactory("MoonVaultFactory");

        const moonVaultFactory = await VaultFactory.deploy();

        await moonVaultFactory.deployed();

        const [owner, one, two, three, four] = await ethers.getSigners();

        return { moonVaultFactory, owner, one, two, three, four}

    }

    it("Should deploy MoonVaultFactory", async function () {
        const { moonVaultFactory } = await loadFixture(deployFactoryFixture)

        expect(moonVaultFactory);

    });

    it("Should allow us to add admins", async function () {
        const { moonVaultFactory, one} = await loadFixture(deployFactoryFixture)

        await expect(moonVaultFactory.connect(one).newMoonVault()).to.be.reverted

        await moonVaultFactory.grantOwnerRole(one.address);

        await expect(moonVaultFactory.connect(one).newMoonVault()).to.not.be.reverted
    });

    async function deployVaultFixture() {
        const { moonVaultFactory } = await loadFixture(deployFactoryFixture)

        const Vault = await ethers.getContractFactory("MoonVault");

        await moonVaultFactory.newMoonVault()

        const address = moonVaultFactory.getLatestVault();

        const moonVault = await Vault.attach(address)

        const [owner, one, two, three, four] = await ethers.getSigners();

        await owner.sendTransaction({
            to: moonVault.address,
            value: "100" // Starting money
        });

        await moonVaultFactory.giveContractOwnership(address, owner.address)

        return { moonVault, owner, one, two, three, four }
    }

    describe("Testing the MoonVault generated by the Factory", function () {

        it("Should deploy MoonVault", async function () {
            const { moonVault } = await loadFixture(deployVaultFixture)

            expect(moonVault);

        });
        it("Should update refundable balances", async function () {

            const { moonVault, one } = await loadFixture(deployVaultFixture)

            const weiAmount = 5000

            await moonVault.updateRefundableBalances(one.address, weiAmount)

            const balance = await moonVault.refundableBalances(one.address)


            expect(balance).equals(weiAmount)
        });
        it("Should deduct refundable balances", async function () {

            const { moonVault, one } = await loadFixture(deployVaultFixture)

            const deposit = 5000

            await moonVault.updateRefundableBalances(one.address, deposit)

            const tokenCollectionDeduction = 2500

            await moonVault.deductRefundableBalances(one.address, tokenCollectionDeduction)

            const balance = await moonVault.refundableBalances(one.address)

            expect(balance).equals(deposit - tokenCollectionDeduction)
        });
        it("Should refund balances", async function () {

            const { moonVault, one } = await loadFixture(deployVaultFixture)

            const deposit = 100

            await moonVault.updateRefundableBalances(one.address, deposit)

            const provider = waffle.provider;

            const contractBalance = await provider.getBalance(moonVault.address);
            const signerBalance = await provider.getBalance(one.address);

            await moonVault.refund(one.address)

            const newContractBalance = await provider.getBalance(moonVault.address);
            const newSignerBalance = await provider.getBalance(one.address);

            expect(contractBalance).equals(newContractBalance.add(deposit))
            expect(signerBalance).equals(newSignerBalance.sub(deposit))

        });
        it("Should close and prevent other calls", async function () {

            const { moonVault, one } = await loadFixture(deployVaultFixture)

            await moonVault.close()

            await expect(moonVault.updateRefundableBalances(one.address, 50)).to.be.reverted
            await expect(moonVault.refund(one.address)).to.be.reverted
        });
        it("Should prevent non owner calls", async function () {

            const { moonVault, one } = await loadFixture(deployVaultFixture)

            await expect(moonVault.connect(one).updateRefundableBalances(one.address, 50)).to.be.reverted
            await expect(moonVault.connect(one).deductRefundableBalances(one.address, 25)).to.be.reverted
            await expect(moonVault.connect(one).refund(one.address)).to.be.reverted
        });
        it("Should allow MoonVault to add an admin", async function () {

            const { moonVault, one } = await loadFixture(deployVaultFixture)

            await moonVault.grantOwnerRole(one.address)

            await expect(moonVault.connect(one).updateRefundableBalances(one.address, 50)).to.not.be.reverted
            await expect(moonVault.connect(one).deductRefundableBalances(one.address, 25)).to.not.be.reverted
            await expect(moonVault.connect(one).refund(one.address)).to.not.be.reverted
        });


    })

})